{"ast":null,"code":"let defaultState = {\n  S: '',\n  M: '',\n  L: '',\n  XL: '',\n  men: '',\n  women: '',\n  nike: '',\n  casio: '',\n  peter: '',\n  sort: '',\n  type: [],\n  brand: [],\n  size: [],\n  products: [],\n  carts: [],\n  cartSave: [],\n  filterList: []\n};\nexport const mainReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"LOAD_PRODUCT\":\n      return {\n        ...state,\n        products: action.payload,\n        filterList: action.payload,\n        size: action.payload,\n        type: action.payload,\n        brand: action.payload\n      };\n    case \"LOAD_CART\":\n      return {\n        ...state,\n        carts: action.payload\n      };\n    case \"LOAD_CART_SAVE\":\n      return {\n        ...state,\n        cartSave: action.payload\n      };\n    case \"SELECT_TYPE\":\n      {\n        switch (action.payload) {\n          case \"men\":\n            state.men = 'men';\n            break;\n          case \"women\":\n            state.women = 'women';\n            break;\n        }\n        console.log(state.men, state.women);\n        let men = state.products.filter(obj => obj.type == state.men);\n        let women = state.products.filter(obj => obj.type == state.women);\n        let newList = [...men, ...women];\n        let a = state.brand.filter(value => state.size.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          type: newList,\n          filterList: filteredArray\n        };\n      }\n    case \"REMOVE_TYPE\":\n      {\n        switch (action.payload) {\n          case \"men\":\n            state.men = '';\n            break;\n          case \"women\":\n            state.women = '';\n            break;\n        }\n        console.log(state.men, state.women);\n        let men = state.products.filter(obj => obj.type == state.men);\n        let women = state.products.filter(obj => obj.type == state.women);\n        let newList = [...men, ...women];\n        if (newList.length == 0) newList = state.products;\n        let a = state.brand.filter(value => state.size.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          filterList: filteredArray,\n          type: newList\n        };\n      }\n    case \"SELECT_BRAND\":\n      {\n        // console.log(\"state\",state.sort);\n        switch (action.payload) {\n          case \"nike\":\n            state.nike = 'nike';\n            break;\n          case \"casio\":\n            state.casio = 'casio';\n            break;\n          case \"peter england\":\n            state.peter = 'peter england';\n            break;\n        }\n        let nike = state.products.filter(obj => obj.brand == state.nike);\n        let peter = state.products.filter(obj => obj.brand == state.peter);\n        let casio = state.products.filter(obj => obj.brand == state.casio);\n        let newList = [...nike, ...casio, ...peter];\n        let a = state.type.filter(value => state.size.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          brand: newList,\n          filterList: filteredArray\n        };\n      }\n    case \"REMOVE_BRAND\":\n      {\n        switch (action.payload) {\n          case \"nike\":\n            state.nike = '';\n            break;\n          case \"casio\":\n            state.casio = '';\n            break;\n          case \"peter england\":\n            state.peter = '';\n            break;\n        }\n        let nike = state.products.filter(obj => obj.brand == state.nike);\n        let peter = state.products.filter(obj => obj.brand == state.peter);\n        let casio = state.products.filter(obj => obj.brand == state.casio);\n        let newList = [...nike, ...casio, ...peter];\n        // console.log(\"remove\", newList);\n        if (newList.length == 0) newList = state.products;\n        let a = state.type.filter(value => state.size.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          brand: newList,\n          filterList: filteredArray\n        };\n      }\n    case \"SELECT_SIZE\":\n      {\n        switch (action.payload) {\n          case \"S\":\n            state.S = 'S';\n            break;\n          case \"L\":\n            state.L = 'L';\n            break;\n          case \"M\":\n            state.M = 'M';\n            break;\n          case \"XL\":\n            state.XL = 'XL';\n            break;\n        }\n        console.log(state.S, state.M, state.L, state.XL);\n        let S = state.products.filter(obj => obj.size == state.S);\n        let M = state.products.filter(obj => obj.size == state.M);\n        let L = state.products.filter(obj => obj.size == state.L);\n        let XL = state.products.filter(obj => obj.size == state.XL);\n        let newList = [...S, ...M, ...L, ...XL];\n        let a = state.type.filter(value => state.brand.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          size: newList,\n          filterList: filteredArray\n        };\n      }\n    case \"REMOVE_SIZE\":\n      {\n        switch (action.payload) {\n          case \"S\":\n            state.S = '';\n            break;\n          case \"L\":\n            state.L = '';\n            break;\n          case \"M\":\n            state.M = '';\n            break;\n          case \"XL\":\n            state.XL = '';\n            break;\n        }\n        let S = state.products.filter(obj => obj.size == state.S);\n        let M = state.products.filter(obj => obj.size == state.M);\n        let L = state.products.filter(obj => obj.size == state.L);\n        let XL = state.products.filter(obj => obj.size == state.XL);\n        let newList = [...S, ...M, ...L, ...XL];\n        if (newList.length == 0) newList = state.products;\n        let a = state.type.filter(value => state.brand.includes(value));\n        let filteredArray = a.filter(value => newList.includes(value));\n        filteredArray = sortArray(filteredArray, state.sort);\n        return {\n          ...state,\n          size: newList,\n          filterList: filteredArray\n        };\n      }\n    case \"SORT\":\n      {\n        // console.log(newList);\n        let newList = sortArray(state.filterList, action.payload);\n        return {\n          ...state,\n          filterList: [...newList],\n          sort: action.payload\n        };\n      }\n    case \"SEARCH\":\n      console.log(action.payload);\n      let searchType = state.products.filter(obj => obj.type == action.payload);\n      let searchBrand = state.products.filter(obj => obj.brand == action.payload);\n      let searchCategory = state.products.filter(obj => obj.category == action.payload);\n      let newList = [...searchType, ...searchBrand, ...searchCategory];\n      if (action.payload == '') newList = state.products;\n      return {\n        ...state,\n        filterList: newList\n      };\n    case \"REMOVE\":\n      return {\n        ...state,\n        S: '',\n        M: '',\n        L: '',\n        XL: '',\n        men: '',\n        women: '',\n        nike: '',\n        casio: '',\n        peter: '',\n        sort: '',\n        filterList: state.products,\n        size: state.products,\n        type: state.products,\n        brand: state.products\n      };\n    default:\n      return state;\n  }\n};\nconst sortArray = (filteredArray, ele) => {\n  let newList = filteredArray;\n  if (ele == \"Inc\") newList.sort((a, b) => {\n    return a.price - b.price;\n  });else {\n    if (ele == \"Dec\") {\n      newList.sort((a, b) => {\n        return b.price - a.price;\n      });\n      // newList.reverse();\n    } else {\n      newList = filteredArray;\n    }\n  }\n  return newList;\n};","map":{"version":3,"names":["defaultState","S","M","L","XL","men","women","nike","casio","peter","sort","type","brand","size","products","carts","cartSave","filterList","mainReducer","state","arguments","length","undefined","action","payload","console","log","filter","obj","newList","a","value","includes","filteredArray","sortArray","searchType","searchBrand","searchCategory","category","ele","b","price"],"sources":["C:/Users/User.DESKTOP-GTIDCS3/Desktop/Redcart1_copy/client/src/store/reducers/index.js"],"sourcesContent":["\r\nlet defaultState = {\r\n    S: '',\r\n    M: '',\r\n    L: '',\r\n    XL: '',\r\n    men: '',\r\n    women: '',\r\n    nike: '',\r\n    casio: '',\r\n    peter: '',\r\n    sort: '',\r\n    type: [],\r\n    brand: [],\r\n    size: [],  \r\n    products: [],\r\n    carts: [],\r\n    cartSave: [],\r\n    filterList: []\r\n}\r\n\r\nexport const mainReducer = (state = defaultState, action) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"LOAD_PRODUCT\": return {\r\n            ...state,\r\n            products: action.payload,\r\n            filterList: action.payload,\r\n            size: action.payload,\r\n            type: action.payload,\r\n            brand: action.payload,\r\n        }\r\n\r\n        case \"LOAD_CART\": return {\r\n            ...state,\r\n            carts: action.payload\r\n        }\r\n\r\n        case \"LOAD_CART_SAVE\": return {\r\n            ...state,\r\n            cartSave: action.payload\r\n        }\r\n\r\n        case \"SELECT_TYPE\":\r\n            {\r\n                switch (action.payload) {\r\n                    case \"men\": state.men = 'men'; break;\r\n                    case \"women\": state.women = 'women'; break;\r\n                }\r\n                console.log(state.men, state.women);\r\n\r\n                let men = state.products.filter((obj) => obj.type == state.men)\r\n                let women = state.products.filter((obj) => obj.type == state.women)\r\n                let newList = [...men, ...women]\r\n                let a = state.brand.filter(value => state.size.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n                return {\r\n                    ...state,\r\n                    type: newList,\r\n                    filterList: filteredArray\r\n\r\n                }\r\n            }\r\n\r\n        case \"REMOVE_TYPE\":\r\n            {\r\n                switch (action.payload) {\r\n                    case \"men\": state.men = ''; break;\r\n                    case \"women\": state.women = ''; break;\r\n                }\r\n                console.log(state.men, state.women);\r\n                let men = state.products.filter((obj) => obj.type == state.men)\r\n                let women = state.products.filter((obj) => obj.type == state.women)\r\n                let newList = [...men, ...women]\r\n                if (newList.length == 0)\r\n                    newList = state.products\r\n                let a = state.brand.filter(value => state.size.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n\r\n                return {\r\n                    ...state,\r\n                    filterList: filteredArray,\r\n                    type: newList\r\n                }\r\n            }\r\n\r\n        case \"SELECT_BRAND\":\r\n            {\r\n                // console.log(\"state\",state.sort);\r\n                switch (action.payload) {\r\n                    case \"nike\": state.nike = 'nike'; break;\r\n                    case \"casio\": state.casio = 'casio'; break;\r\n                    case \"peter england\": state.peter = 'peter england'; break;\r\n                }\r\n                let nike = state.products.filter((obj) => obj.brand == state.nike)\r\n                let peter = state.products.filter((obj) => obj.brand == state.peter)\r\n                let casio = state.products.filter((obj) => obj.brand == state.casio)\r\n                let newList = [...nike, ...casio, ...peter]\r\n                let a = state.type.filter(value => state.size.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n\r\n\r\n                return {\r\n                    ...state,\r\n                    brand: newList,\r\n                    filterList: filteredArray\r\n                }\r\n\r\n            }\r\n\r\n        case \"REMOVE_BRAND\":\r\n            {\r\n                switch (action.payload) {\r\n                    case \"nike\": state.nike = ''; break;\r\n                    case \"casio\": state.casio = ''; break;\r\n                    case \"peter england\": state.peter = ''; break;\r\n                }\r\n                let nike = state.products.filter((obj) => obj.brand == state.nike)\r\n                let peter = state.products.filter((obj) => obj.brand == state.peter)\r\n                let casio = state.products.filter((obj) => obj.brand == state.casio)\r\n                let newList = [...nike, ...casio, ...peter]\r\n                // console.log(\"remove\", newList);\r\n                if (newList.length == 0)\r\n                    newList = state.products\r\n\r\n                let a = state.type.filter(value => state.size.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n\r\n\r\n                return {\r\n                    ...state,\r\n                    brand: newList,\r\n                    filterList: filteredArray\r\n                }\r\n            }\r\n\r\n        case \"SELECT_SIZE\":\r\n            {\r\n                switch (action.payload) {\r\n                    case \"S\": state.S = 'S'; break;\r\n                    case \"L\": state.L = 'L'; break;\r\n                    case \"M\": state.M = 'M'; break;\r\n                    case \"XL\": state.XL = 'XL'; break;\r\n                }\r\n                console.log(state.S, state.M, state.L, state.XL);\r\n                let S = state.products.filter((obj) => obj.size == state.S)\r\n                let M = state.products.filter((obj) => obj.size == state.M)\r\n                let L = state.products.filter((obj) => obj.size == state.L)\r\n                let XL = state.products.filter((obj) => obj.size == state.XL)\r\n                let newList = [...S, ...M, ...L, ...XL]\r\n                let a = state.type.filter(value => state.brand.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n\r\n\r\n                return {\r\n                    ...state,\r\n                    size: newList,\r\n                    filterList: filteredArray\r\n                }\r\n            }\r\n\r\n\r\n        case \"REMOVE_SIZE\":\r\n            {\r\n                switch (action.payload) {\r\n                    case \"S\": state.S = ''; break;\r\n                    case \"L\": state.L = ''; break;\r\n                    case \"M\": state.M = ''; break;\r\n                    case \"XL\": state.XL = ''; break;\r\n                }\r\n                let S = state.products.filter((obj) => obj.size == state.S)\r\n                let M = state.products.filter((obj) => obj.size == state.M)\r\n                let L = state.products.filter((obj) => obj.size == state.L)\r\n                let XL = state.products.filter((obj) => obj.size == state.XL)\r\n                let newList = [...S, ...M, ...L, ...XL]\r\n                if (newList.length == 0)\r\n                    newList = state.products\r\n                let a = state.type.filter(value => state.brand.includes(value))\r\n                let filteredArray = a.filter(value => newList.includes(value))\r\n                filteredArray=sortArray(filteredArray,state.sort)\r\n\r\n                return {\r\n                    ...state,\r\n                    size: newList,\r\n                    filterList: filteredArray\r\n                }\r\n            }\r\n        case \"SORT\": {\r\n           \r\n            \r\n            // console.log(newList);\r\n            let newList=sortArray(state.filterList,action.payload)\r\n            return {\r\n                ...state,\r\n                filterList: [...newList],\r\n                sort: action.payload\r\n            }\r\n        }\r\n        case \"SEARCH\":\r\n            console.log(action.payload);\r\n            let searchType = state.products.filter(obj => obj.type == action.payload)\r\n            let searchBrand = state.products.filter(obj => obj.brand == action.payload)\r\n            let searchCategory = state.products.filter(obj => obj.category == action.payload)\r\n            let newList = [...searchType, ...searchBrand, ...searchCategory]\r\n            if (action.payload == '')\r\n                newList = state.products\r\n            return {\r\n                ...state,\r\n                filterList: newList\r\n            }\r\n        case \"REMOVE\":\r\n            return {\r\n                ...state,\r\n                S: '',\r\n                M: '',\r\n                L: '',\r\n                XL: '',\r\n                men: '',\r\n                women: '',\r\n                nike: '',\r\n                casio: '',\r\n                peter: '',\r\n                sort: '',\r\n                filterList: state.products,\r\n                size: state.products,\r\n                type: state.products,\r\n                brand: state.products\r\n\r\n            }\r\n        default: return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst sortArray=(filteredArray,ele)=>{\r\n            let newList = filteredArray;\r\n            if (ele == \"Inc\")\r\n                newList.sort((a, b) => { return a.price - b.price });\r\n            else {\r\n                if(ele== \"Dec\")\r\n                {\r\n                    newList.sort((a, b) => { return b.price - a.price });\r\n                    // newList.reverse();\r\n                }\r\n                else{\r\n                    newList=filteredArray\r\n                }\r\n            }\r\n            return newList\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}